#ifndef __ASYNC_FSM__
#define __ASYNC_FSM__

#include "utils.h"
#include "EventQueue.h"
#include "EventsObserver.h"

/**
 * Abstract class for implementing Asynchronous Finite State Machines.
 *
 * NOTES:
 * - it is an Observer of events generated by event source;
 * - the state is meant to be modelled by derived classes, i.e. template pattern.
 */
class AsyncFSM : public EventsObserver {

public:
    /**
     * Adds an event in a queue of events that are occurred.
     */
    void notifyEvent(Event* ev);
    /**
     * Checks if one or more events are present in the queue and executes the first one of them.
     * This method should be called very frequently and should not be executed in the same flow of the EventsObserver method
     * when dealing with interrupts.
     * This is a template method.
     */
    void checkEvents(void);
    /**
     * Contains the policy of what to do when an event occurs. This is the method called inside the template method.
     */
    virtual void handleEvent(Event* ev) = 0;
    ~AsyncFSM(void) { }

protected:
    AsyncFSM(void);

private:
    EventQueue eventQueue;

};

#endif
